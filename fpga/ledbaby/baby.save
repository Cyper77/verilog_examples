module baby(
  input clk100,
  input resetn,
  input button,
  output [3:0] led,
  output [7:0] led2,
  output reg panel_r0, panel_g0, panel_b0, panel_r1, panel_g1, panel_b1,
  output reg panel_a, panel_b, panel_c, panel_d, panel_clk, panel_stb, panel_oe);

reg [31:0] a, d;
reg [4:0] ci, addr;
reg [2:0] f;
reg [2:0] state = WAITING;
wire we, re;

localparam SPEED = 18, COLOR = 'h0000ff, CI_COLOR = 'hff0000,
           R_COLOR = 'h00ff00, W_COLOR = 'hffff00;

wire [3:0] ctrl_wr;
wire ctrl_rd;
wire [15:0] ctrl_addr;
wire [31:0] ctrl_wdat;
reg [31:0] ctrl_rdat;
reg ctrl_done;

reg [5:0] ci_line, r_line, w_line;

assign ctrl_rd = 0;
assign ctrl_wr[3] = 0;

reg [SPEED+5:0] slow_counter;

reg [31:0] lines [0:31];
initial $readmemh("lines.hex", lines);

always @(posedge clk100) begin
  slow_counter <= slow_counter + 1;
  if (w_line < 32) lines[w_line] <= a;
  if (&slow_counter[SPEED-7:0]) begin
    if (&lines[slow_counter[SPEED+5:SPEED+1]][slow_counter[SPEED:SPEED-4]]) begin
      ctrl_addr <= (((31 - slow_counter[SPEED:SPEED-4]) << 5) + slow_counter[SPEED+5:SPEED+1])  << 2;
      ctrl_wdat <= (slow_counter[SPEED+5:SPEED+1] == ci_line ? CI_COLOR :
                    slow_counter[SPEED+5:SPEED+1] == r_line ? R_COLOR :
                    slow_counter[SPEED+5:SPEED+1] == w_line ? W_COLOR : COLOR);
      ctrl_wr[2:0] <= 3'b111;
    end
  end
  if (ctrl_done) ctrl_wr[2:0] <= 3'b000;
end


ledpanel #(.CLOCK_FREQ_HZ(100000000)) panel (.clk(clk100), .resetn(resetn),
           .ctrl_wr(ctrl_wr), .ctrl_rd(ctrl_rd), .ctrl_addr(ctrl_addr),
           .ctrl_wdat(ctrl_wdat), .ctrl_rdat(ctrl_rdat), .ctrl_done(ctrl_done),
           .panel_r0(panel_r0), .panel_g0(panel_g0), .panel_b0(panel_b0),
           .panel_r1(panel_r1), .panel_g1(panel_g1), .panel_b1(panel_b1),
           .panel_a(panel_a), .panel_b(panel_b), .panel_c(panel_c),
           .panel_d(panel_d), .panel_clk(panel_clk), .panel_stb(panel_stb),
           .panel_oe(panel_oe));

reg [1:0] counter;
always @(posedge clk100) counter <= counter + 1;

wire clk =  clk100; // Timing just OK for 100Mhz

localparam WAITING = 0, SCAN1 = 1, ACTION1 = 2, 
           SCAN2 = 3, SCAN0 = 4,  ACTION2 = 5, 
           ACTION3 = 6, STOPPED = 7;

line_ram ram (.clk(clk), .addr(addr), .din(a), 
              .we(we), .re(re), .dout(d));

always @(posedge clk) begin
  if (!resetn) begin state <= WAITING; ci <= 0; end
  case (state)
    WAITING: if (~button) state = SCAN0; // Doesn't work after pressing reset
    SCAN0: if (&slow_counter[23:0]) state <= SCAN1;
    SCAN1: begin re <= 1; ci <= ci + 1; addr <= ci + 1; state <= ACTION1; end
    ACTION1: begin; ci_line <= ci;re <= 0; state <= SCAN2; end // delay for BRAM
    SCAN2: begin 
             addr <= d[31:27]; 
             f <= d[18:16]; 
             state <= ACTION2;
             if (d[18:16]  == 3) begin we <= 1; w_line <= d[31:27]; end
             else if (d[18:16] < 6) begin re <= 1; r_line <= d[31:27]; end
           end
    ACTION2: begin re <= 0; we <= 0; state <= ACTION3; end
    ACTION3:
      begin
        state <= SCAN0;
        case (f)
          0: ci <= d;                               // JMP
          1: ci <= ci + d;                          // JRP
          2: a <= -d;                               // LDN
          4, 5: a <= a - d;                         // SUB
          6: if ($signed(a) < 0) ci <= ci + 1;      // CMP
          7: state <= STOPPED;                      // STOP
        endcase
      end
   endcase
end

assign led = {3'b000, state == STOPPED}; 
assign led2 = a; // Show accumular at end of program
endmodule

module line_ram(
  input clk,
  input [4:0] addr, 
  output reg [31:0] dout,
  input [31:0] din,
  input we,
  input re 
);

reg [31:0] ram [0:31]; 

initial $readmemh("lines.hex", ram); 

always @(posedge clk) begin 
  if (we) ram[addr] <= din;
  else if (re) dout <= ram[addr]; 
end 

endmodule
