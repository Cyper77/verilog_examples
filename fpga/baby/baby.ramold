module baby(
  input clk100,
  input button,
  output [3:0] led,
  output [7:0] led2
);

reg [31:0] a, d;
reg [4:0] ci, addr, waddr;
reg [2:0] f;
reg [2:0] state = WAITING;
wire we;
reg [1:0] counter;
wire clk =  counter[0]; // Timing says less than 100Mhz, but !00Mhz works

always @(posedge clk100) counter <= counter + 1;

localparam WAITING = 0, SCAN1 = 1, ACTION1 = 2, 
           SCAN2 = 3, SCAN3 = 4,  
           ACTION2 = 5, STOPPED = 6;

line_ram ram (.clk(clk), .raddr(addr), .waddr(waddr), .din(a), 
              .we(we), .dout(d));

always @(posedge clk) begin
  case (state)
    WAITING: if (~button) state = SCAN1; // Doesn't work after pressing reset
    SCAN1: begin ci <= ci + 1; addr <= ci + 1; state <= ACTION1; end
    ACTION1: state <= SCAN2; // delay for BRAM
    SCAN2: begin addr <= d[31:27]; f <= d[18:16]; state <= SCAN3; end
    SCAN3: state <= ACTION2; // delay for BRAM
    ACTION2:
      begin
        state <= SCAN1;
        we <= 0;
        case (f)
          3'd0: ci <= d;                               // JMP
          3'd1: ci <= ci + d;                          // JRP
          3'd2: a <= -d;                               // LDN
          3'd3: begin we <= 1; waddr = addr; end       // STO
          3'd4, 3'd5: a <= a - d;                      // SUB
          3'd6: if (a < 0) ci <= ci + 1;               // CMP
          3'd7: state <= STOPPED;                      // STOP
        endcase
      end
   endcase
end

assign led = {3'b000, state == STOPPED}; 
assign led2 = a; // Show accumular at end of program
endmodule

module line_ram(
  input clk,
  input [4:0] raddr, 
  input [4:0] waddr, 
  output reg [31:0] dout,
  input [31:0] din,
  input we 
);

reg [31:0] ram [0:32]; 

initial $readmemh("lines.hex", ram); 

always @(posedge clk) begin 
  if (we) ram[waddr] <= din;
  else dout <= ram[raddr]; 
end 

endmodule
